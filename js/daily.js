// js/daily.js
const tgD = window.Telegram.WebApp;
// –§—É–Ω–∫—Ü—ñ—è getFormattedDate —Ç–∞ TODAY_STRING –º–∞—é—Ç—å –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ. 
// –í–æ–Ω–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ app.js —ñ –±—É–¥—É—Ç—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Å–∫–æ—É–ø—ñ, –∞–±–æ —ó—Ö —Ç—Ä–µ–±–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏, —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—ñ.
// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ MVP –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤–æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ. –Ø–∫—â–æ –Ω—ñ, —ó—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—É—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–¥–∞—Ç–∏.
// function getFormattedDate(date) { ... } // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –∑ app.js
// const TODAY_STRING = getFormattedDate(new Date()); // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ

const dailyMatchData = {
    team1: "–í–æ—Ä—Å–∫–ª–∞ –ü–æ–ª—Ç–∞–≤–∞",
    team2: "–ó–æ—Ä—è –õ—É–≥–∞–Ω—Å—å–∫",
    options: {
        p1: { name: "–ü1", description: "–ü–µ—Ä–µ–º–æ–≥–∞ –í–æ—Ä—Å–∫–ª–∞" },
        x:  { name: "X", description: "–ù—ñ—á–∏—è" },
        p2: { name: "–ü2", description: "–ü–µ—Ä–µ–º–æ–≥–∞ –ó–æ—Ä—è" }
    },
    correctOutcome: "p1"
};

const dailyLoginState = {
    currentStreak: 0,
    lastPredictionDate: null
};

const currentStreakEl = document.getElementById('currentStreak');
const dailyMatchTeamsEl = document.getElementById('dailyMatchTeams');
const dailyPredictionOptionsEl = document.getElementById('dailyPredictionOptions');
const dailyPredictionResultEl = document.getElementById('dailyPredictionResult');

function loadDailyLoginState() {
    if (!currentStreakEl) return; // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∞

    const savedStreak = localStorage.getItem('betkingDailyStreak');
    const savedDate = localStorage.getItem('betkingLastPredictionDate');

    if (savedStreak !== null) {
        dailyLoginState.currentStreak = parseInt(savedStreak, 10);
    }
    if (savedDate !== null) {
        dailyLoginState.lastPredictionDate = savedDate;
    }
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É TODAY_STRING –∑ app.js
    if (dailyLoginState.lastPredictionDate && dailyLoginState.lastPredictionDate !== window.TODAY_STRING) {
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É getFormattedDate –∑ app.js
        if (dailyLoginState.lastPredictionDate !== window.getFormattedDate(yesterday)) {
            dailyLoginState.currentStreak = 0;
        }
    }
    currentStreakEl.textContent = dailyLoginState.currentStreak;
}

function saveDailyLoginState() {
    localStorage.setItem('betkingDailyStreak', dailyLoginState.currentStreak);
    localStorage.setItem('betkingLastPredictionDate', dailyLoginState.lastPredictionDate);
}

function displayDailyPredictionModule() {
    if (!dailyMatchTeamsEl) return; // –ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ

    loadDailyLoginState();
    currentStreakEl.textContent = dailyLoginState.currentStreak;
    dailyMatchTeamsEl.textContent = `${dailyMatchData.team1} - ${dailyMatchData.team2}`;
    dailyPredictionOptionsEl.innerHTML = '';
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É TODAY_STRING –∑ app.js
    let alreadyPredictedToday = dailyLoginState.lastPredictionDate === window.TODAY_STRING;

    for (const key in dailyMatchData.options) {
        const option = dailyMatchData.options[key];
        const button = document.createElement('button');
        button.className = 'prediction-button';
        button.dataset.key = key;
        button.textContent = option.name;
        button.title = option.description;
        if (alreadyPredictedToday) button.disabled = true;
        button.addEventListener('click', handleDailyPrediction);
        dailyPredictionOptionsEl.appendChild(button);
    }

    if (alreadyPredictedToday) {
        dailyPredictionResultEl.innerHTML = `<div class="info-message notice">–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ —Å–≤—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!</div>`;
    } else {
        dailyPredictionResultEl.innerHTML = `<div class="info-message notice">–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á –¥–Ω—è!</div>`;
    }
}

function handleDailyPrediction(event) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É TODAY_STRING –∑ app.js
    if (dailyLoginState.lastPredictionDate === window.TODAY_STRING) {
        tgD.showAlert("–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!");
        return;
    }
    const predictedKey = event.currentTarget.dataset.key;
    const isCorrect = predictedKey === dailyMatchData.correctOutcome;
    let message = `–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: ${dailyMatchData.options[predictedKey].description}. `;
    let messageClass = 'notice';

    if (isCorrect) {
        message += "–¶–µ –ü–†–ê–í–ò–õ–¨–ù–û! ‚úÖ";
        messageClass = 'success';
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É getFormattedDate –∑ app.js
        if (dailyLoginState.lastPredictionDate === window.getFormattedDate(yesterday)) {
            dailyLoginState.currentStreak++;
        } else {
            dailyLoginState.currentStreak = 1;
        }
        tgD.HapticFeedback.notificationOccurred('success');
        if (typeof confetti === 'function') { confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } }); }
    } else {
        message += "–ù–∞ –∂–∞–ª—å, –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û. ‚ùå";
        dailyLoginState.currentStreak = 0;
        tgD.HapticFeedback.notificationOccurred('error');
    }
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É TODAY_STRING –∑ app.js
    dailyLoginState.lastPredictionDate = window.TODAY_STRING;
    saveDailyLoginState();
    currentStreakEl.textContent = dailyLoginState.currentStreak;
    
    const rewards = { 3: "–§—Ä—ñ–±–µ—Ç X", 7: "–§—Ä—ñ–±–µ—Ç Y", 10: "–§—Ä—ñ–±–µ—Ç Z" };
    if (isCorrect && rewards[dailyLoginState.currentStreak]) {
        message += `\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ ${rewards[dailyLoginState.currentStreak]} –∑–∞ ${dailyLoginState.currentStreak} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø–æ—Å–ø—ñ–ª—å!`;
    }
    dailyPredictionResultEl.innerHTML = `<div class="info-message ${messageClass}">${message.replace(/\n/g, "<br>")}</div>`;
    document.querySelectorAll('#dailyPredictionOptions .prediction-button').forEach(btn => btn.disabled = true);
}

displayDailyPredictionModule();