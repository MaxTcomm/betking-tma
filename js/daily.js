// js/daily.js
(function() {
    const dailyContent = document.getElementById('dailyLoginContent');
    if (!dailyContent) {
        return;
    }

    const tgD = window.Telegram.WebApp;
    const getFormattedDate = window.getFormattedDate; // –ó app.js
    const TODAY_STRING = window.TODAY_STRING;     // –ó app.js

    // –î–∞–Ω—ñ –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π "—â–æ–¥–µ–Ω–Ω–∏–π –º–∞—Ç—á" (–º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –≤ —Ç–µ–æ—Ä—ñ—ó)
    // –î–ª—è MVP, –∫–ª—é—á –º–∞—Ç—á—É –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é, –∫–æ–ª–∏ –≤—ñ–Ω –ø—Ä–æ–ø–æ–Ω—É—î—Ç—å—Å—è
    const currentDailyMatch = {
        key: `dailyMatch_${TODAY_STRING}`, // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –¥–ª—è –º–∞—Ç—á—É —Ü—å–æ–≥–æ –¥–Ω—è
        team1: "–ö–æ–ª–æ—Å –ö–æ–≤–∞–ª—ñ–≤–∫–∞",
        team2: "–õ–ù–ó –ß–µ—Ä–∫–∞—Å–∏",
        options: {
            p1: { name: "–ü1", description: "–ü–µ—Ä–µ–º–æ–≥–∞ –ö–æ–ª–æ—Å" },
            x:  { name: "X", description: "–ù—ñ—á–∏—è" },
            p2: { name: "–ü2", description: "–ü–µ—Ä–µ–º–æ–≥–∞ –õ–ù–ó" }
        },
        // "–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á—É. 
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ —Ü–µ –± –≤–∏–∑–Ω–∞—á–∞–ª–æ—Å—è –ø—ñ—Å–ª—è –º–∞—Ç—á—É.
        correctOutcome: "x" 
    };

    // –°—Ç–∞–Ω, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ localStorage
    const dailyLoginState = {
        currentStreak: 0,
        // pendingPrediction: { matchKey: null, predictedOutcome: null, dateMade: null }
        pendingPrediction: null, 
        lastSettledDate: null // –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
    };

    const currentStreakEl = dailyContent.querySelector('#currentStreak');
    const dailyMatchTeamsEl = dailyContent.querySelector('#dailyMatchTeams');
    const dailyPredictionOptionsEl = dailyContent.querySelector('#dailyPredictionOptions');
    const dailyPredictionResultEl = dailyContent.querySelector('#dailyPredictionResult');

    function loadState() {
        const savedStreak = localStorage.getItem('betkingDailyStreak_v2');
        const savedPendingPrediction = localStorage.getItem('betkingPendingPrediction_v2');
        const savedLastSettledDate = localStorage.getItem('betkingLastSettledDate_v2');

        if (savedStreak !== null) {
            dailyLoginState.currentStreak = parseInt(savedStreak, 10);
        }
        if (savedPendingPrediction !== null) {
            try {
                dailyLoginState.pendingPrediction = JSON.parse(savedPendingPrediction);
            } catch (e) {
                console.error("Error parsing pending prediction:", e);
                dailyLoginState.pendingPrediction = null;
            }
        }
        if (savedLastSettledDate !== null) {
            dailyLoginState.lastSettledDate = savedLastSettledDate;
        }
        currentStreakEl.textContent = dailyLoginState.currentStreak;
    }

    function saveState() {
        localStorage.setItem('betkingDailyStreak_v2', dailyLoginState.currentStreak);
        if (dailyLoginState.pendingPrediction) {
            localStorage.setItem('betkingPendingPrediction_v2', JSON.stringify(dailyLoginState.pendingPrediction));
        } else {
            localStorage.removeItem('betkingPendingPrediction_v2');
        }
        if (dailyLoginState.lastSettledDate) {
            localStorage.setItem('betkingLastSettledDate_v2', dailyLoginState.lastSettledDate);
        } else {
            localStorage.removeItem('betkingLastSettledDate_v2');
        }
    }

    function settlePendingPrediction() {
        let message = "";
        let messageClass = "notice";

        if (dailyLoginState.pendingPrediction) {
            const prediction = dailyLoginState.pendingPrediction;
            // –î–ª—è MVP, –≤–≤–∞–∂–∞—î–º–æ, —â–æ –º–∞—Ç—á "–≤—ñ–¥–±—É–≤—Å—è", —è–∫—â–æ dateMade < TODAY_STRING
            // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ—ó –¥–∞—Ç–∏ –º–∞—Ç—á—É
            if (prediction.dateMade < TODAY_STRING) {
                // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–æ–≥–æ –º–∞—Ç—á—É (–¥–ª—è MVP —Ü–µ –∑–∞–≤–∂–¥–∏ —Ç–æ–π —Å–∞–º–∏–π)
                // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ, –º–∏ –± –º–∞–ª–∏ —Å–ø—ñ–≤—Å—Ç–∞–≤–ª—è—Ç–∏ prediction.matchKey
                const actualOutcome = currentDailyMatch.correctOutcome; // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ correctOutcome –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞—Ç—á—É —è–∫ "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" –º–∏–Ω—É–ª–æ–≥–æ

                const isCorrect = prediction.predictedOutcome === actualOutcome;
                
                message = `–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –≤—ñ–¥ ${prediction.dateMade} –Ω–∞ –º–∞—Ç—á (${prediction.matchKey.substring(11)}):\n–í–∏ –æ–±—Ä–∞–ª–∏ "${currentDailyMatch.options[prediction.predictedOutcome]?.description || '–Ω–µ–≤—ñ–¥–æ–º–æ'}". `;

                if (isCorrect) {
                    message += "–¶–µ –ü–†–ê–í–ò–õ–¨–ù–û! ‚úÖ";
                    messageClass = 'success';
                    
                    // –õ–æ–≥—ñ–∫–∞ —Å—Ç—Ä—ñ–∫—É: —á–∏ –±—É–≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ "–≤—á–æ—Ä–∞" –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É
                    const predictionDate = new Date(prediction.dateMade);
                    const dayBeforePrediction = new Date(predictionDate);
                    dayBeforePrediction.setDate(predictionDate.getDate() - 1);

                    if (dailyLoginState.lastSettledDate === getFormattedDate(dayBeforePrediction)) {
                        dailyLoginState.currentStreak++;
                    } else {
                        // –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±—É–≤ –Ω–µ "–≤—á–æ—Ä–∞" –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑—É, –∞–±–æ –π–æ–≥–æ –Ω–µ –±—É–ª–æ,
                        // –∞–ª–µ –ø—Ä–æ–≥–Ω–æ–∑ –ü–†–ê–í–ò–õ–¨–ù–ò–ô, —Å—Ç—Ä—ñ–∫ —Å—Ç–∞—î 1.
                        dailyLoginState.currentStreak = 1;
                    }
                    tgD.HapticFeedback.notificationOccurred('success');
                     if (window.confetti) { window.confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 }, zIndex: 10000 }); }
                } else {
                    message += "–ù–∞ –∂–∞–ª—å, –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û. ‚ùå";
                    messageClass = 'error';
                    dailyLoginState.currentStreak = 0;
                    tgD.HapticFeedback.notificationOccurred('error');
                }

                dailyLoginState.lastSettledDate = prediction.dateMade; // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
                dailyLoginState.pendingPrediction = null; // –û—á–∏—â—É—î–º–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
                saveState();
                currentStreakEl.textContent = dailyLoginState.currentStreak;

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–æ—Ä–æ–¥
                const rewards = { 3: "–§—Ä—ñ–±–µ—Ç X", 7: "–§—Ä—ñ–±–µ—Ç Y", 10: "–§—Ä—ñ–±–µ—Ç Z" };
                if (isCorrect && rewards[dailyLoginState.currentStreak]) {
                    message += `\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ ${rewards[dailyLoginState.currentStreak]} –∑–∞ ${dailyLoginState.currentStreak} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø–æ—Å–ø—ñ–ª—å!`;
                }
                dailyPredictionResultEl.innerHTML = `<div class="info-message ${messageClass}">${message.replace(/\n/g, "<br>")}</div>`;
                return true; // –ë—É–≤ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
            }
        }
        return false; // –ù–µ –±—É–ª–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    }


    function displayDailyOffer() {
        if (!dailyMatchTeamsEl || !dailyPredictionOptionsEl || !dailyPredictionResultEl) {
            console.error('Daily DOM elements not found for display offer.');
            return;
        }
        
        currentStreakEl.textContent = dailyLoginState.currentStreak;
        dailyMatchTeamsEl.textContent = `${currentDailyMatch.team1} - ${currentDailyMatch.team2}`;
        dailyPredictionOptionsEl.innerHTML = '';

        // –ß–∏ —î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π (–Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π) –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?
        const hasActivePredictionForToday = dailyLoginState.pendingPrediction && dailyLoginState.pendingPrediction.dateMade === TODAY_STRING;

        if (hasActivePredictionForToday) {
            dailyPredictionResultEl.innerHTML = `<div class="info-message notice">–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –º–∞—Ç—á (${currentDailyMatch.team1} vs ${currentDailyMatch.team2}) –ø—Ä–∏–π–Ω—è—Ç–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ –≤—ñ–¥–æ–º–∏–π –ø—ñ–∑–Ω—ñ—à–µ.</div>`;
            dailyPredictionOptionsEl.innerHTML = ''; // –•–æ–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
        } else {
            // –Ø–∫—â–æ –Ω–µ –±—É–ª–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É (settlePendingPrediction –ø–æ–≤–µ—Ä–Ω—É–≤ false), —ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ, —Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é
             if (!dailyPredictionResultEl.innerHTML.includes('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É')) { // –©–æ–± –Ω–µ –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
                dailyPredictionResultEl.innerHTML = `<div class="info-message notice">–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –º–∞—Ç—á!</div>`;
             }

            for (const key in currentDailyMatch.options) {
                const option = currentDailyMatch.options[key];
                const button = document.createElement('button');
                button.className = 'prediction-button';
                button.dataset.key = key;
                button.textContent = option.name;
                button.title = option.description;
                button.addEventListener('click', handleDailyPrediction);
                dailyPredictionOptionsEl.appendChild(button);
            }
        }
    }

    function handleDailyPrediction(event) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        if (dailyLoginState.pendingPrediction && dailyLoginState.pendingPrediction.dateMade === TODAY_STRING) {
            tgD.showAlert("–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!");
            return;
        }

        const predictedKey = event.currentTarget.dataset.key;
        
        dailyLoginState.pendingPrediction = {
            matchKey: currentDailyMatch.key,
            predictedOutcome: predictedKey,
            dateMade: TODAY_STRING
        };
        saveState();

        dailyPredictionResultEl.innerHTML = `<div class="info-message success">–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á ${currentDailyMatch.team1} - ${currentDailyMatch.team2} (${currentDailyMatch.options[predictedKey].description}) –ø—Ä–∏–π–Ω—è—Ç–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ –≤—ñ–¥–æ–º–∏–π –ø—ñ–∑–Ω—ñ—à–µ.</div>`;
        dailyPredictionOptionsEl.querySelectorAll('.prediction-button').forEach(btn => btn.disabled = true);
        tgD.HapticFeedback.impactOccurred('light');
    }
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—è
    loadState();
    const settled = settlePendingPrediction(); // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∏–Ω—É–ª–∏–π –ø—Ä–æ–≥–Ω–æ–∑
    displayDailyOffer(); // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –∞–±–æ —Å—Ç–∞–Ω

})();