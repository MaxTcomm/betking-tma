// js/daily.js
(function() {
    const dailyContent = document.getElementById('dailyLoginContent');
    if (!dailyContent) {
        // console.log('Daily content not found, script will not run yet.');
        return;
    }
    // console.log('Daily script executing.');

    const tgD = window.Telegram.WebApp;
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ app.js
    const getFormattedDate = window.getFormattedDate;
    const TODAY_STRING = window.TODAY_STRING;


    const dailyMatchData = {
        team1: "–í–æ—Ä—Å–∫–ª–∞ –ü–æ–ª—Ç–∞–≤–∞",
        team2: "–ó–æ—Ä—è –õ—É–≥–∞–Ω—Å—å–∫",
        options: {
            p1: { name: "–ü1", description: "–ü–µ—Ä–µ–º–æ–≥–∞ –í–æ—Ä—Å–∫–ª–∞" },
            x:  { name: "X", description: "–ù—ñ—á–∏—è" },
            p2: { name: "–ü2", description: "–ü–µ—Ä–µ–º–æ–≥–∞ –ó–æ—Ä—è" }
        },
        correctOutcome: "p1" // –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ü—å–æ–≥–æ –º–∞—Ç—á—É (–¥–ª—è MVP)
    };

    const dailyLoginState = {
        currentStreak: 0,
        lastPredictionDate: null // YYYY-MM-DD
    };

    const currentStreakEl = dailyContent.querySelector('#currentStreak');
    const dailyMatchTeamsEl = dailyContent.querySelector('#dailyMatchTeams');
    const dailyPredictionOptionsEl = dailyContent.querySelector('#dailyPredictionOptions');
    const dailyPredictionResultEl = dailyContent.querySelector('#dailyPredictionResult');

    function loadDailyLoginState() {
        if (!currentStreakEl) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –µ–ª–µ–º–µ–Ω—Ç —ñ—Å–Ω—É—î
            console.error('Daily streak element not found.');
            return;
        }

        const savedStreak = localStorage.getItem('betkingDailyStreak');
        const savedDate = localStorage.getItem('betkingLastPredictionDate');

        if (savedStreak !== null) {
            dailyLoginState.currentStreak = parseInt(savedStreak, 10);
        }
        if (savedDate !== null) {
            dailyLoginState.lastPredictionDate = savedDate;
        }
        
        if (dailyLoginState.lastPredictionDate && dailyLoginState.lastPredictionDate !== TODAY_STRING) {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            if (dailyLoginState.lastPredictionDate !== getFormattedDate(yesterday)) {
                dailyLoginState.currentStreak = 0; 
            }
        }
        currentStreakEl.textContent = dailyLoginState.currentStreak;
    }

    function saveDailyLoginState() {
        localStorage.setItem('betkingDailyStreak', dailyLoginState.currentStreak);
        localStorage.setItem('betkingLastPredictionDate', dailyLoginState.lastPredictionDate);
    }

    function displayDailyPredictionModule() {
        if (!dailyMatchTeamsEl || !dailyPredictionOptionsEl || !dailyPredictionResultEl) {
            console.error('Daily DOM elements not found for display.');
            return;
        }
        loadDailyLoginState(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
        
        currentStreakEl.textContent = dailyLoginState.currentStreak;
        dailyMatchTeamsEl.textContent = `${dailyMatchData.team1} - ${dailyMatchData.team2}`;
        dailyPredictionOptionsEl.innerHTML = '';

        let alreadyPredictedToday = dailyLoginState.lastPredictionDate === TODAY_STRING;

        for (const key in dailyMatchData.options) {
            const option = dailyMatchData.options[key];
            const button = document.createElement('button');
            button.className = 'prediction-button';
            button.dataset.key = key;
            button.textContent = option.name;
            button.title = option.description;
            if (alreadyPredictedToday) {
                button.disabled = true;
            }
            button.addEventListener('click', handleDailyPrediction);
            dailyPredictionOptionsEl.appendChild(button);
        }

        if (alreadyPredictedToday) {
            dailyPredictionResultEl.innerHTML = `<div class="info-message notice">–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ —Å–≤—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!</div>`;
        } else {
            dailyPredictionResultEl.innerHTML = `<div class="info-message notice">–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á –¥–Ω—è!</div>`;
        }
    }

    function handleDailyPrediction(event) {
        if (dailyLoginState.lastPredictionDate === TODAY_STRING) {
            tgD.showAlert("–í–∏ –≤–∂–µ –∑—Ä–æ–±–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!");
            return;
        }

        const predictedKey = event.currentTarget.dataset.key;
        const isCorrect = predictedKey === dailyMatchData.correctOutcome;
        let message = `–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑: ${dailyMatchData.options[predictedKey].description}. `;
        let messageClass = 'notice';


        if (isCorrect) {
            message += "–¶–µ –ü–†–ê–í–ò–õ–¨–ù–û! ‚úÖ";
            messageClass = 'success';
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            if (dailyLoginState.lastPredictionDate === getFormattedDate(yesterday)) {
                dailyLoginState.currentStreak++;
            } else {
                dailyLoginState.currentStreak = 1;
            }
            tgD.HapticFeedback.notificationOccurred('success');
            if (window.confetti) { // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ window.confetti
                window.confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 }, zIndex: 10000 });
            }
        } else {
            message += "–ù–∞ –∂–∞–ª—å, –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û. ‚ùå";
            messageClass = 'error'; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ø–æ–º–∏–ª–∫–∏
            dailyLoginState.currentStreak = 0;
            tgD.HapticFeedback.notificationOccurred('error');
        }

        dailyLoginState.lastPredictionDate = TODAY_STRING;
        saveDailyLoginState();
        if(currentStreakEl) currentStreakEl.textContent = dailyLoginState.currentStreak; // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—ñ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        
        const rewards = { 3: "–§—Ä—ñ–±–µ—Ç X", 7: "–§—Ä—ñ–±–µ—Ç Y", 10: "–§—Ä—ñ–±–µ—Ç Z" };
        if (isCorrect && rewards[dailyLoginState.currentStreak]) {
            message += `\nüéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ ${rewards[dailyLoginState.currentStreak]} –∑–∞ ${dailyLoginState.currentStreak} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø–æ—Å–ø—ñ–ª—å!`;
        }
        if(dailyPredictionResultEl) dailyPredictionResultEl.innerHTML = `<div class="info-message ${messageClass}">${message.replace(/\n/g, "<br>")}</div>`;
        
        dailyPredictionOptionsEl.querySelectorAll('.prediction-button').forEach(btn => btn.disabled = true);
    }
    
    displayDailyPredictionModule();
})();